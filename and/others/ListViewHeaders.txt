Listview with headers
=====================

activity_main.xml
-----------------
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >

    <TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="ListView with Heading" />

    <ListView
        android:id="@+id/list_journal"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:background="#ff0000" />

</LinearLayout>

list_header.xml
---------------
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/list_header_title"
    style="?android:attr/listSeparatorTextViewStyle"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:paddingBottom="2dip"
    android:paddingLeft="5dip"
    android:paddingTop="2dip" />


list_item.xml
--------------
<?xml version="1.0" encoding="utf-8"?>
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/list_item_title"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:paddingBottom="10dip"
    android:paddingLeft="15dip"
    android:paddingTop="10dip"
    android:background="#0000ff"
    android:textColor="#ffffff"
    android:textAppearance="?android:attr/textAppearanceLarge" />

MainActivity.java
-----------------
package com.example.grouplv;

import java.util.HashMap;
import java.util.Map;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class MainActivity extends Activity {

	public final static String ITEM_TITLE = "title";
	public final static String ITEM_CAPTION = "caption";

	// SectionHeaders
	private final static String[] days = new String[] { "Mon", "Tue", "Wed","Thur", "Fri" };

	// Section Contents
	private final static String[] notes = new String[] { "Breakfast","Lunch", "Dinner" };
	private final static String[] notes1 = new String[] { "1","2", "3","4","5" };

	// MENU - ListView
	private ListView addJournalEntryItem;

	// Adapter for ListView Contents
	private SeparatedListAdapter adapter;

	// ListView Contents
	private ListView journalListView;

	public Map<String, ?> createItem(String title, String caption) {
		Map<String, String> item = new HashMap<String, String>();
		item.put(ITEM_TITLE, title);
		item.put(ITEM_CAPTION, caption);
		return item;
	}

	@Override
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);

		// Sets the View Layer
		setContentView(R.layout.activity_main);

		// Interactive Tools
//		final ArrayAdapter<String> journalEntryAdapter = new ArrayAdapter<String>(
//				this, R.layout.add_journalentry_menuitem,new String[] { "Add Journal Entry" });
//
//		// AddJournalEntryItem
//		addJournalEntryItem = (ListView) this
//				.findViewById(R.id.add_journalentry_menuitem);
//		addJournalEntryItem.setAdapter(journalEntryAdapter);
//		addJournalEntryItem.setOnItemClickListener(new OnItemClickListener() {
//			@Override
//			public void onItemClick(AdapterView<?> parent, View view,
//					int position, long duration) {
//				String item = journalEntryAdapter.getItem(position);
//				Toast.makeText(getApplicationContext(), item,
//						Toast.LENGTH_SHORT).show();
//			}
//		});

		// Create the ListView Adapter
		adapter = new SeparatedListAdapter(this);
		ArrayAdapter<String> listadapter = new ArrayAdapter<String>(this,R.layout.list_item, notes);
		ArrayAdapter<String> listadapter1 = new ArrayAdapter<String>(this,R.layout.list_item, notes1);

		// Add Sections
		for (int i = 0; i < days.length; i++) {
			if(i==1)
			{
				adapter.addSection(days[i], listadapter1);
			}
			else
			{
			adapter.addSection(days[i], listadapter);
			}
		}

		// Get a reference to the ListView holder
		journalListView = (ListView) this.findViewById(R.id.list_journal);

		// Set the adapter on the ListView holder
		journalListView.setAdapter(adapter);

		// Listen for Click events
		journalListView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,int position, long duration) {
				String item = (String) adapter.getItem(position);
				Toast.makeText(getApplicationContext(), item,Toast.LENGTH_SHORT).show();
			}
		});
	}

}
SeparatedListAdapter.java
-------------------------
package com.example.grouplv;

import java.util.LinkedHashMap;
import java.util.Map;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;

public class SeparatedListAdapter extends BaseAdapter {
	public final Map<String, Adapter> sections = new LinkedHashMap<String, Adapter>();
	public final ArrayAdapter<String> headers;
	public final static int TYPE_SECTION_HEADER = 0;

	public SeparatedListAdapter(Context context) {
		headers = new ArrayAdapter<String>(context, R.layout.list_header);
	}

	public void addSection(String section, Adapter adapter) {
		this.headers.add(section);
		this.sections.put(section, adapter);
	}

	public Object getItem(int position) {
		for (Object section : this.sections.keySet()) {
			Adapter adapter = sections.get(section);
			int size = adapter.getCount() + 1;

			// check if position inside this section
			if (position == 0)
				return section;
			if (position < size)
				return adapter.getItem(position - 1);

			// otherwise jump into next section
			position -= size;
		}
		return null;
	}

	public int getCount() {
		// total together all sections, plus one for each section header
		int total = 0;
		for (Adapter adapter : this.sections.values())
			total += adapter.getCount() + 1;
		return total;
	}

	@Override
	public int getViewTypeCount() {
		// assume that headers count as one, then total all sections
		int total = 1;
		for (Adapter adapter : this.sections.values())
			total += adapter.getViewTypeCount();
		return total;
	}

	@Override
	public int getItemViewType(int position) {
		int type = 1;
		for (Object section : this.sections.keySet()) {
			Adapter adapter = sections.get(section);
			int size = adapter.getCount() + 1;

			// check if position inside this section
			if (position == 0)
				return TYPE_SECTION_HEADER;
			if (position < size)
				return type + adapter.getItemViewType(position - 1);

			// otherwise jump into next section
			position -= size;
			type += adapter.getViewTypeCount();
		}
		return -1;
	}

	public boolean areAllItemsSelectable() {
		return false;
	}

	@Override
	public boolean isEnabled(int position) {
		return (getItemViewType(position) != TYPE_SECTION_HEADER);
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		int sectionnum = 0;
		for (Object section : this.sections.keySet()) {
			Adapter adapter = sections.get(section);
			int size = adapter.getCount() + 1;

			// check if position inside this section
			if (position == 0)
				return headers.getView(sectionnum, convertView, parent);
			if (position < size)
				return adapter.getView(position - 1, convertView, parent);

			// otherwise jump into next section
			position -= size;
			sectionnum++;
		}
		return null;
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

}

