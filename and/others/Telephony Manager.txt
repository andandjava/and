Telephony Manager
================
TelephonyManager is used to do the following:-

1. Initiating phone calls

2. Reading the phone, network, data connectivity, and SIM states

3. Monitoring changes to the phone, network, data connectivity, and SIM states


Android’s telephony APIs is used to monitor mobile voice and data connections as well as incoming and outgoing calls.


Launching the Dialer to Initiate Phone Calls
----------------------------------------------------------------

// Intent i=new Intent(Intent.ACTION_DIAL);

Intent i=new Intent(Intent.ACTION_DIAL,Uri.parse("tel: 9848586878")); //an implicit intent

startActivity(i);


Accessing Phone and Network Properties and Status
--------------------------------------
Access to the telephony APIs is managed by the TelephonyManager, accessible using the getSystemService()

TelephonyManager tm= (TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);

Reading Phone Device Details
------------------------------------------
Using the TelephonyManager we can obtain the phone type (GSM or CDMA), unique ID (IMEI or MEID), software version, and number. 

Except for the phone type, reading each of these properties requires that the READ_PHONE_STATE permission be included in the AndroidManifest.xml.

1) Create a New Android Project

2) In activity_main.xml - place a button, a ScrollView and inside that a TextView

3) Provide the permission android.permission.READ_PHONE_STATE

4) MainActivity.java

public class MainActivity extends Activity implements OnClickListener 
{
Button b;
TextView tv;
TelephonyManager tm;
protected void onCreate(Bundle savedInstanceState) 
{
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

b=(Button)findViewById(R.id.button1);
b.setOnClickListener(this);

tv=(TextView)findViewById(R.id.textView1);

tm=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
}


public void onClick(View v) 
{
tv.setText("");	
StringBuffer sb=new StringBuffer();

int phoneType=tm.getPhoneType();
switch(phoneType)
{
case TelephonyManager.PHONE_TYPE_CDMA:
sb.append("Phone Type- CDMA");
break;
case TelephonyManager.PHONE_TYPE_GSM:
sb.append("Phone Type- GSM");
break;
case TelephonyManager.PHONE_TYPE_NONE:
sb.append("Phone Type- NONE");
break;
}//switch

sb.append("\n Phone ID- "+tm.getDeviceId());

sb.append("\n S/W Version- "+tm.getDeviceSoftwareVersion());

sb.append("\n Phone No- "+tm.getLine1Number()); //to get Phone no

sb.append("\n Network Name- "+tm.getNetworkOperator());

sb.append("\n Operator Name- "+tm.getNetworkOperatorName());

sb.append("\n SIM Operator- "+tm.getSimOperatorName());

sb.append("\n Country- "+tm.getSimCountryIso());

sb.append("\n *** Data Connectivity ***\n");

int dataActivity=tm.getDataActivity();

switch(dataActivity) 
{
case TelephonyManager.DATA_ACTIVITY_IN:
sb.append("Incoming Data");	
break;
case TelephonyManager.DATA_ACTIVITY_OUT:
sb.append("Outgoing Data");
break;
case TelephonyManager.DATA_ACTIVITY_INOUT: 
sb.append("Incoming & Outgoing Data");
break;
case TelephonyManager.DATA_ACTIVITY_NONE: 
sb.append("No data transfer");
break;
}
sb.append("\n\n");
int dataState=tm.getDataState();
switch(dataState) 
{
case TelephonyManager.DATA_CONNECTED:
sb.append("Connected");	
break;
case TelephonyManager.DATA_CONNECTING: 
sb.append("Connecting");
break;
case TelephonyManager.DATA_DISCONNECTED:
sb.append("Dis-Connected");	
break;
case TelephonyManager.DATA_SUSPENDED:
sb.append("Suspended");	
break;
}


tv.setText(sb);
}
}

*******************************



Reading Network Details
-----------------------
When you are connected to a network, you can use the TelephonyManager to read the mobile country and network code (MCC+MNC), the country ISO code, and the type of network connected to.

// Get connected network country ISO code
String networkCountry= tm.getNetworkCountryIso();

// Get the connected network operator ID (MCC + MNC)
String networkOperatorId =  tm.getNetworkOperator();

// Get the connected network operator name
String networkName=tm.getNetworkOperatorName();
 
// Get the type of network you are connected to

int networkType=tm.getNetworkType();
switch (networkType) {
case (TelephonyManager.NETWORK_TYPE_1xRTT) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_CDMA) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_EDGE) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_EVDO_0) : [ . . . do something . . . ]
break;

case (TelephonyManager.NETWORK_TYPE_EVDO_A) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_GPRS) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_HSDPA) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_HSPA) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_HSUPA) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_UMTS) : [ . . . do something . . . ]
break;
case (TelephonyManager.NETWORK_TYPE_UNKNOWN) : [ . . . do something . . . ]
break;
default: break;
}


Reading SIM Details
-------------------
If your application is running on a GSM device it will have a SIM. You can query the SIM details from the Telephony Manager to obtain the ISO country code, operator name, and operator MCC (mobile country code) and MNC (mobile network code) for the SIM installed in the current device. These details can be useful if you need to provide specialized functionality for a particular carrier.

You can also obtain the serial number for the current SIM if you include the READ_PHONE_STATE usespermission in your application manifest.
Before you can use any of these methods you must ensure that the SIM is in a ready state. You can determine this using the getSimState() method

int simState = telephonyManager.getSimState();
switch (simState) {
case (TelephonyManager.SIM_STATE_ABSENT): break;
case (TelephonyManager.SIM_STATE_NETWORK_LOCKED): break;
case (TelephonyManager.SIM_STATE_PIN_REQUIRED): break;
case (TelephonyManager.SIM_STATE_PUK_REQUIRED): break;
case (TelephonyManager.SIM_STATE_UNKNOWN): break;
case (TelephonyManager.SIM_STATE_READY): {
// Get the SIM country ISO code
String simCountry = telephonyManager.getSimCountryIso();
// Get the operator code of the active SIM (MCC + MNC)
String simOperatorCode = telephonyManager.getSimOperator();
// Get the name of the SIM operator
String simOperatorName = telephonyManager.getSimOperatorName();
// -- Requires READ_PHONE_STATE uses-permission --
// Get the SIM’s serial number
String simSerial = telephonyManager.getSimSerialNumber();

break;
}
default: break;
}





Monitoring Incoming Phone Calls
--------------------------------
One of the most popular reasons for monitoring phone state is to detect, and react to, incoming phone calls.

To do so, override the onCallStateChanged method in a Phone State Listener implementation, and register it as

PhoneStateListener callStateListener = new PhoneStateListener() {
public void onCallStateChanged(int state, String incomingNumber) {
// TODO React to incoming call.
}
};
telephonyManager.listen(callStateListener,
PhoneStateListener.LISTEN_CALL_STATE);


The onCallStateChanged handler receives the phone number associated with incoming calls, and the
state parameter represents the current call state as one of the following three values:
? TelephonyManager.CALL_STATE_IDLE When the phone is neither ringing nor in a call
? TelephonyManager.CALL_STATE_RINGING When the phone is ringing
? TelephonyManager.CALL_STATE_OFFHOOK When the phone is currently in a call


Tracking Cell Location Changes

You can get notifications whenever the current cell location changes by overriding onCellLocationChanged on a Phone State Listener implementation. Before you can register to listen for cell location changes, you need to add the ACCESS_COARSE_LOCATION permission to your application manifest.
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>

The onCellLocationChanged handler receives a CellLocation object that includes methods for extracting
the cell ID (getCid) and the current LAC (getLac).


Tracking cell changes
PhoneStateListener cellLocationListener = new PhoneStateListener() {
public void onCellLocationChanged(CellLocation location) {
GsmCellLocation gsmLocation = (GsmCellLocation)location;
Toast.makeText(getApplicationContext(),
String.valueOf(gsmLocation.getCid()),
Toast.LENGTH_LONG).show();
}
};
telephonyManager.listen(cellLocationListener,
PhoneStateListener.LISTEN_CELL_LOCATION);
Tracking Service Changes
The onServiceStateChanged handler tracks the service details for the device’s cell service. Use the
ServiceState parameter to find details of the current service state.
The getState method on the Service State object returns the current service state as one of the following
ServiceState constants:
STATE_IN_SERVICE Normal phone service is available.
STATE_EMERGENCY_ONLY Phone service is available but only for emergency calls.
STATE_OUT_OF_SERVICE No cell phone service is currently available.
STATE_POWER_OFF The phone radio is turned off (usually when airplane mode is enabled).
A series of getOperator* methods is available to retrieve details on the operator supplying the cell
phone service, while getRoaming tells you if the device is currently using a roaming profile.
LHow to register for service state changes and displays a Toast showing the operator
name of the current phone service.


PhoneStateListener serviceStateListener = new PhoneStateListener() {
public void onServiceStateChanged(ServiceState serviceState) {
if (serviceState.getState() == ServiceState.STATE_IN_SERVICE) {
String toastText = serviceState.getOperatorAlphaLong();
Toast.makeText(getApplicationContext(), toastText, Toast.LENGTH_SHORT);
}
}
};
telephonyManager.listen(serviceStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE);


Monitoring data connections and transfers
PhoneStateListener dataStateListener = new PhoneStateListener() {
public void onDataActivity(int direction) {
switch (direction) {
case TelephonyManager.DATA_ACTIVITY_IN : break;
case TelephonyManager.DATA_ACTIVITY_OUT : break;
case TelephonyManager.DATA_ACTIVITY_INOUT : break;
case TelephonyManager.DATA_ACTIVITY_NONE : break;
}
}
public void onDataConnectionStateChanged(int state) {
switch (state) {
case TelephonyManager.DATA_CONNECTED : break;
case TelephonyManager.DATA_CONNECTING : break;
case TelephonyManager.DATA_DISCONNECTED : break;
case TelephonyManager.DATA_SUSPENDED : break;
}
}
};
telephonyManager.listen(dataStateListener,
PhoneStateListener.LISTEN_DATA_ACTIVITY |
PhoneStateListener.LISTEN_DATA_CONNECTION_STATE);