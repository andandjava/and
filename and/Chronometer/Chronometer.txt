Chronometer
==========
Class that implements a simple timer.

You can give it a start time in the elapsedRealtime() timebase, and it counts up from that, or if you don't give it a base time, it will use the time at which you call start(). By default it will display the current timer value in the form "MM:SS" or "H:MM:SS", or you can use setFormat(String) to format the timer value into an arbitrary string.

activity_main.xml
=================
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:padding="4dip"
    android:gravity="center_horizontal"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Chronometer android:id="@+id/chronometer"
        android:format="chronometer_initial_format"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_weight="0"
        android:paddingBottom="30dip"
        android:paddingTop="30dip"
        />

    <Button android:id="@+id/start"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
        android:text="chronometer_start">
        <requestFocus />
    </Button>

    <Button android:id="@+id/stop"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
        android:text="chronometer_stop">
    </Button>

    <Button android:id="@+id/reset"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
        android:text="chronometer_reset">
    </Button>

    <Button android:id="@+id/set_format"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
        android:text="chronometer_set_format">
    </Button>

    <Button android:id="@+id/clear_format"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
        android:text="chronometer_clear_format">
    </Button>

</LinearLayout>
MainActivity.java
==================
package com.example.test;

import android.app.Activity;
import android.os.Bundle;
import android.os.SystemClock;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Chronometer;

public class MainActivity extends Activity {
	Chronometer mChronometer;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);

		Button button;

		mChronometer = (Chronometer) findViewById(R.id.chronometer);

		// Watch for button clicks.
		button = (Button) findViewById(R.id.start);
		button.setOnClickListener(mStartListener);

		button = (Button) findViewById(R.id.stop);
		button.setOnClickListener(mStopListener);

		button = (Button) findViewById(R.id.reset);
		button.setOnClickListener(mResetListener);

		button = (Button) findViewById(R.id.set_format);
		button.setOnClickListener(mSetFormatListener);

		button = (Button) findViewById(R.id.clear_format);
		button.setOnClickListener(mClearFormatListener);
	}

	View.OnClickListener mStartListener = new OnClickListener() {
		public void onClick(View v) {
			mChronometer.start();
		}
	};

	View.OnClickListener mStopListener = new OnClickListener() {
		public void onClick(View v) {
			mChronometer.stop();
		}
	};

	View.OnClickListener mResetListener = new OnClickListener() {
		public void onClick(View v) {
			mChronometer.setBase(SystemClock.elapsedRealtime());
		}
	};

	View.OnClickListener mSetFormatListener = new OnClickListener() {
		public void onClick(View v) {
			mChronometer.setFormat("Formatted time (%s)");
		}
	};

	View.OnClickListener mClearFormatListener = new OnClickListener() {
		public void onClick(View v) {
			mChronometer.setFormat(null);
		}
	};
}

